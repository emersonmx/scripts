#!/usr/bin/env python

import os
import json
import shutil
import shlex
import subprocess
import argparse


class SubcommandHelpFormatter(argparse.RawDescriptionHelpFormatter):
    def _format_action(self, action):
        parts = super()._format_action(action)
        if action.nargs == argparse.PARSER:
            parts = "\n".join(parts.split("\n")[1:])
        return parts


def load_config_file(path):
    with open(path) as j:
        return json.load(j)
    return {}


def command_exists(cmd):
    return cmd and shutil.which(cmd)


def path_exists(path):
    return path and os.path.exists(os.path.expandvars(path))


def run_command(**kwargs):
    with subprocess.Popen(**kwargs) as _:
        args = kwargs['args']
        if isinstance(args, str):
            args = [args]
        print(' '.join(args))


def install_action(args):
    configs = load_config_file(args.file)

    managers = configs.get('managers', [])
    for data in managers:
        install_default_action(data)


def install_default_action(data):
    package_list = []
    for p in data['packages']:
        if p.get('install_command'):
            install_custom_action(data)
            continue

        cmd, path, pkg = p.get('command'), p.get('path'), p.get('package')

        if command_exists(cmd) or path_exists(path):
            continue

        if not pkg:
            continue

        if isinstance(pkg, list):
            package_list += pkg
        else:
            package_list.append(pkg)

    if not package_list:
        return

    run_command(args=shlex.split(data.get('install_command')) + package_list)


def install_custom_action(data):
    for p in data.get('packages', []):
        cmd, path, install_cmd = (
            p.get('command'), p.get('path'), p.get('install_command')
        )

        if not install_cmd:
            continue

        if command_exists(cmd) or path_exists(path):
            continue

        run_command(args=install_cmd, shell=True)


def update_action(args):
    configs = load_config_file(args.file)

    managers = configs.get('managers', [])
    for data in managers:
        package_list = []
        command = data.get('update_command', None)
        if command:
            for p in data['packages']:
                pkg = p
                if not isinstance(p, str):
                    pkg = p['package']

                assert pkg

                if isinstance(pkg, list):
                    package_list += pkg
                else:
                    package_list.append(pkg)

            if not package_list:
                continue

            run_command(args=shlex.split(command) + package_list)
        else:
            for p in data['packages']:
                run_command(args=p['update_command'], shell=True)


def main():
    parser = argparse.ArgumentParser(
        prog='cpm',
        description='Customer Package Manager',
        formatter_class=SubcommandHelpFormatter,
        usage='%(prog)s [options] <command>'
    )
    parser.add_argument('-f', dest='file', help='a cpm package configs')

    actions_parser = parser.add_subparsers(title='commands')
    install_parser = actions_parser.add_parser(
        'install', help='Install packages')
    install_parser.set_defaults(func=install_action)
    update_parse = actions_parser.add_parser(
        'update', help='Update packages')
    update_parse.set_defaults(func=update_action)

    parser.set_defaults(file='cpm.json', func=lambda _: parser.print_help())

    args = parser.parse_args()
    args.func(args)


if __name__ == '__main__':
    main()
