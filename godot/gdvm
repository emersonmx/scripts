#!/bin/bash

godot_download_url='https://downloads.tuxfamily.org/godotengine'

function get_versions()
{
    curl -s -L $godot_download_url \
        | sed -r -e '/href="([0-9]\.?)+\/"/!d' -e 's#.*href="(.*)/".*#\1#' \
        | sort -u
}

function get_packages_by_version()
{
    version="$1"
    [[ $2 == 'mono' ]] && version_type='mono/' || version_type=''

    url="$godot_download_url/$version/$version_type"
    curl -s -L $url \
        | sed -r \
            -e '/href="Godot_.*\.zip"/!d' \
            -e 's#.*href="(.*\.zip)">.*#\1#'
}

[[ -z $1 ]] && version="$(get_versions | tail -n1)" || version="$1"
[[ -z $2 ]] && version_type='normal' || version_type="$2"
[[ -z $3 ]] && arch_version='64' || arch_version="$3"

godot_config_path="${XDG_CONFIG_HOME:-$HOME/.config}/godot"
godot_versions_path="$godot_config_path/versions"
local_bin_path="$HOME/.local/bin"
version_path="$godot_versions_path/$version"

mkdir -p $godot_config_path
mkdir -p $godot_versions_path
mkdir -p $local_bin_path
mkdir -p $version_path

function get_binary_name()
{
    case $1 in
        *'x11'* )
            echo 'godot'
            ;;
        *'linux_server'* )
            echo 'godot_server'
            ;;
        *'linux_headless'* )
            echo 'godot_headless'
            ;;
    esac
}

function get_binary_arch()
{
    case $1 in
        *'32'* )
            echo '32'
            ;;
        *'64'* )
            echo '64'
            ;;
    esac
}

function download_package()
{
    download_url="$godot_download_url/$version"
    [[ $version_type == 'mono' ]] \
        && download_url="$download_url/mono"
        download_url="$download_url/"

    package_name="$1"
    package_path="$version_path/$package_name"
    binary_name="$2"
    binary_path="$version_path/$binary_name"

    rm -f $package_path
    curl -L -o $package_path "$download_url/$package_name"
    unzip $package_path -d "$version_path/"

    rm -f $binary_path
    rm -f $package_path
    mv -f "$version_path/$(basename $package_name .zip)" "$binary_path"
}

function install_binary()
{
    package_name="$1"
    binary_name=$(get_binary_name $package_name)
    binary_path="$version_path/$binary_name"

    if [[ -f $binary_path ]]
    then
        echo "Installing $binary_name ..."
        ln -sf $binary_path "$local_bin_path/$binary_name"
        printf "Done.\n\n"
    else
        echo "Downloading $package_name ..."
        download_package $package_name $binary_name
        install_binary $package_name
    fi
}

for package in $(get_packages_by_version $version $version_type)
do
    case $package in
        *'linux'*|*'x11'* )
            [[ $package == *$arch_version* ]] && install_binary $package
            ;;
        * )
            ;;
    esac
done
